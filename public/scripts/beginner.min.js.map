{"version":3,"sources":["beginner.min.js"],"names":["angular","module","config","$provide","$routeProvider","factory","run","$http","$route","get","success","routeList","forEach","item","when","url","templateUrl","template","controller","reload","$scope","AppListService","submitForm","app","post","then","console","log","reason","service","data","registeredApps","update","message","$q","method","request","deferred","defer","notify","resolve","error","reject","statements_1","promise","serviceWrapper","put","remove"],"mappings":"AAAAA,QAAQC,OAAO,SAAU,YACzBD,QAAQC,OAAO,SAASC,QACtB,WACA,iBACA,SAAUC,EAAUC,GAClBD,EAASE,QAAQ,iBAAkB,WACjC,MAAOD,QAGVE,KACD,iBACA,QACA,SACA,SAAUF,EAAgBG,EAAOC,GAC/BD,EAAME,IAAI,uBAAuBC,QAAQ,SAAUC,GACjDX,QAAQY,QAAQD,EAAW,SAAUE,GACnCT,EAAeU,KAAKD,EAAKE,KACvBC,YAAaH,EAAKI,SAClBC,WAAYL,EAAKK,eAGrBV,EAAOW,cAIbnB,QAAQC,OAAO,SAASiB,WAAW,qBACjC,SACA,iBACA,SAAUE,EAAQC,GAChBD,EAAOE,WAAa,SAAUC,GAC5BF,EAAeG,KAAKD,GAAKE,KAAK,WAC5BC,QAAQC,IAAI,kBACX,SAAUC,GACXF,QAAQC,IAAI,kBAAoBC,MAGpCP,EAAeQ,QAAQ,OAAOJ,KAAK,SAAUK,GAC3CV,EAAOW,eAAiBD,GACvB,SAAUF,GACXF,QAAQC,IAAIC,IACX,SAAUI,GACXN,QAAQC,IAAIK,QAIlBhC,QAAQC,OAAO,SAASiB,WAAW,kBACjC,SACA,SAAUE,GACRA,EAAOa,QAAU,4CAGrBjC,QAAQC,OAAO,SAASI,QAAQ,kBAC9B,QACA,KACA,SAAUE,EAAO2B,GACf,QAASL,GAAQM,EAAQC,GACvB,GAAIC,GAAWH,EAAGI,OAElB,QADAD,EAASE,OAAO,sBACRJ,GACR,IAAK,MACH5B,EAAME,IAAI,sBAAsBC,QAAQ,SAAUoB,GAChDO,EAASG,QAAQV,KAChBW,MAAM,SAAUX,GACjBO,EAASK,OAAOZ,IAElB,MACF,KAAK,OACHvB,EAAMiB,KAAK,qBAAsBY,GAAS1B,QAAQ,SAAUoB,GAC1DO,EAASG,QAAQV,KAChBW,MAAM,SAAUX,GACjBO,EAASK,OAAOZ,KAElBa,YACA,MACF,KAAK,MACHA,YACA,MACF,KAAK,SACHA,aAGF,MAAON,GAASO,QAElB,QAASnC,KACP,MAAOoC,gBAAe,OAExB,QAASC,MAET,QAAStB,GAAKY,GACZ,MAAOS,gBAAe,OAAQT,GAEhC,QAASW,MAET,OACEtC,IAAKA,EACLqC,IAAKA,EACLtB,KAAMA,EACNuB,OAAQA,EACRlB,QAASA","file":"beginner.min.js","sourcesContent":["angular.module('myApp', ['ngRoute']);\r\n\r\nangular.module('myApp').config(['$provide', '$routeProvider', function($provide, $routeProvider) {\r\n  $provide.factory('$routeProvider', function() {\r\n    return $routeProvider;\r\n  });\r\n}]).run(['$routeProvider', '$http', '$route', function($routeProvider, $http, $route) {\r\n  $http.get('scripts/routes.json').success(function(routeList) {\r\n    angular.forEach(routeList, function(item) {\r\n      $routeProvider.when(item.url, {\r\n        templateUrl: item.template,\r\n        controller: item.controller\r\n      });\r\n    });\r\n    $route.reload();\r\n  });\r\n}]);\nangular.module('myApp').controller('AppListController', ['$scope', 'AppListService', function($scope, AppListService) {\r\n  $scope.submitForm = function(app) {\r\n    AppListService.post(app).then(function(data) {\r\n      console.log('app created!!');\r\n    }, function(reason) {\r\n      console.log('creating failed' + reason);\r\n    });\r\n  };\r\n\r\n  AppListService.service('GET').then(function(data) {\r\n    $scope.registeredApps = data;\r\n  }, function(reason) {\r\n    console.log(reason);\r\n  }, function(update) {\r\n    console.log(update);\r\n  });\r\n\r\n}]);\r\n\nangular.module('myApp').controller('HomeController', ['$scope', function($scope) {\r\n  $scope.message = 'Everyone come and see how good I look!';\r\n}]);\nangular.module('myApp').factory('AppListService', ['$http', '$q', function($http, $q) {\r\n\r\n  function service(method, request, id) {\r\n    var deferred = $q.defer();\r\n    deferred.notify('Calling Service...');\r\n\r\n    switch (method) {\r\n      case 'GET':\r\n        $http.get('/api/registeredApp').\r\n        success(function(data, status, headers, config) {\r\n          deferred.resolve(data);\r\n        }).\r\n        error(function(data, status, headers, config) {\r\n          deferred.reject(data);\r\n        });\r\n        break;\r\n      case 'POST':\r\n        $http.post('/api/registeredApp', request).\r\n        success(function(data, status, headers, config) {\r\n          deferred.resolve(data);\r\n        }).\r\n        error(function(data, status, headers, config) {\r\n          deferred.reject(data);\r\n        });\r\n        statements_1\r\n        break;\r\n      case 'PUT':\r\n        statements_1\r\n        break;\r\n      case 'DELETE':\r\n        statements_1\r\n        break;\r\n    }\r\n\r\n    return deferred.promise;\r\n  }\r\n\r\n\r\n  function get() {\r\n    return serviceWrapper('GET');\r\n  }\r\n\r\n  function put(id, request) {\r\n\r\n  }\r\n\r\n  function post(request) {\r\n    return serviceWrapper('POST', request);\r\n  }\r\n\r\n  function remove(id) {\r\n\r\n  }\r\n\r\n  return {\r\n    get: get,\r\n    put: put,\r\n    post: post,\r\n    remove: remove,\r\n    service: service\r\n  };\r\n\r\n}]);\r\n"],"sourceRoot":"/source/"}